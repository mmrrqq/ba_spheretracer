#version 410 core
#define MAX_OBJECTS 10
#define MAX_MATERIALS 5

struct Sphere 
{
    int materialId;
    vec3 position;
    float radius;
    bool morph;
};

struct Torus
{
    int materialId;
    vec3 position;
    float radius;
    float tubeRadius;
};

struct PrimitiveScene 
{
    Sphere spheres[MAX_OBJECTS];
    Torus tori[MAX_OBJECTS];    
    int numSpheres;
    int numTori;
};

uniform float UFovY;
uniform vec2 UImageDim;
uniform vec4 UEyePosition;

uniform PrimitiveScene UScene;
uniform mat4 UInvView;

uniform bool UUseDepthTexture;
uniform int UMarchingSteps;
uniform float UMaxDrawDistance;

uniform sampler2D UDepthTexture;

in vec2 TexCoords;
out vec4 color;

// credit iquilez
float distanceToMandelbrot(vec3 pos)
{
    vec3 w = pos;
    float m = dot(w,w);

    vec4 trap = vec4(abs(w),m);
	float dz = 1.0;
    
    
	for( int i=0; i<4; i++ )
    {
        float m2 = m*m;
        float m4 = m2*m2;
		dz = 8.0*sqrt(m4*m2*m)*dz + 1.0;

        float x = w.x; float x2 = x*x; float x4 = x2*x2;
        float y = w.y; float y2 = y*y; float y4 = y2*y2;
        float z = w.z; float z2 = z*z; float z4 = z2*z2;

        float k3 = x2 + z2;
        float k2 = inversesqrt( k3*k3*k3*k3*k3*k3*k3 );
        float k1 = x4 + y4 + z4 - 6.0*y2*z2 - 6.0*x2*y2 + 2.0*z2*x2;
        float k4 = x2 - y2 + z2;

        w.x = pos.x +  64.0*x*y*z*(x2-z2)*k4*(x4-6.0*x2*z2+z4)*k1*k2;
        w.y = pos.y + -16.0*y2*k3*k4*k4 + k1*k1;
        w.z = pos.z +  -8.0*y*k4*(x4*x4 - 28.0*x4*x2*z2 + 70.0*x4*z4 - 28.0*x2*z2*z4 + z4*z4)*k1*k2;     
        
        trap = min( trap, vec4(abs(w),m) );

        m = dot(w,w);
		if( m > 256.0 )
            break;
    }    

    return 0.25*log(m)*sqrt(m)/dz;
}

float distanceToGroundPlane(vec3 planePosition, vec4 planeNormal, vec3 position)
{
	return dot(position - planePosition, planeNormal.xyz) + planeNormal.w;
}

float distanceToSphere(vec3 spherePosition, float sphereRadius, vec3 position)
{
    return length(position - spherePosition) - sphereRadius;
}

float distanceToTorus(vec3 torusPosition, float radius, float tubeRadius, vec3 position)
{
    vec3 torusToPosition = position - torusPosition;
    vec2 q = vec2(length(torusToPosition.xz)-radius,torusToPosition.y);
    return length(q)-tubeRadius;
}

vec2 hardMin(vec2 dist1, vec2 dist2)
{
    return dist1.x < dist2.x ? dist1 : dist2;    
}

vec2 smoothMin(vec2 dist1, vec2 dist2, float k)
{
    float h = max(k - abs(dist1.x - dist2.x), 0.0)/k;
    float dist = min(dist1.x, dist2.x) - h*h*k*(1.0/4.0);
    return vec2(dist, dist1.y);
}

// -> vec2(distance, materialId)
vec2 distanceToScene(vec3 position) 
{    
    vec2 res = vec2(1000, -1);
    
    for (int i = 0; i < UScene.numSpheres; i++)
    {
        Sphere sphere = UScene.spheres[i];
        float d = distanceToSphere(sphere.position, sphere.radius, position);
        if (sphere.morph)
            res = smoothMin(res, vec2(d, sphere.materialId), 0.5);        
        else        
            res = hardMin(res, vec2(d, sphere.materialId));  
    }    

    for (int i = 0; i < UScene.numTori; i++)
    {
        Torus torus = UScene.tori[i];
        float d = distanceToTorus(torus.position, torus.radius, torus.tubeRadius, position);
        res = hardMin(res, vec2(d, torus.materialId));             
    }

    float planeDistance = distanceToGroundPlane(vec3(0.0, -0.5, 0.0), vec4(0.0, 1.0, 0.0, 0.0), position);    
    res = hardMin(res, vec2(planeDistance, 0));

    return res;
}

// https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-generating-camera-rays/generating-camera-rays
vec3 getRayDir()
{
    vec2 uv = tan(radians(UFovY)/2) * ((TexCoords * UImageDim + 0.5) - 0.5 * UImageDim) / UImageDim.y;        
    return  normalize(vec3(uv, -1));
}

void main()
{    
    vec3 cameraRayDir = getRayDir();
    vec4 rayDirection = UInvView * vec4(cameraRayDir, 0.0);       

    float dist = 0;
    float depth = 0;
    vec3 position;
    vec4 eyePosition = UEyePosition;       

    if (UUseDepthTexture)
    {
        depth = texture(UDepthTexture, TexCoords.xy).r * UMaxDrawDistance;        
        if (depth > UMaxDrawDistance - 1)
        {        
            gl_FragDepth = 1.0;
            return;
        }     
    }
        
    float coneRadiusCoeff = 2 * tan(radians(UFovY/2))/ UImageDim.y;

    for(int i = 0; i < UMarchingSteps; i++)
    {                
        position = vec3(eyePosition + depth * rayDirection);        
        vec2 dist_mat = distanceToScene(position);
        dist = dist_mat.x;
        float coneRadius = depth * coneRadiusCoeff;
        if (dist <= coneRadius)
        {                            
            // if we do not substract the coneRadius, the objects get cut..
            // maybe use the last technique described in this post:
            // https://iquilezles.org/www/articles/rmshadows/rmshadows.htm
            // to improve that substraction..
            gl_FragDepth = (depth - coneRadius) / UMaxDrawDistance;
            return;
        }

        depth += dist;

        if (depth > UMaxDrawDistance)
        {            
            gl_FragDepth = 1.0;
            return;
        }       
    }        
    gl_FragDepth = depth / UMaxDrawDistance;
}