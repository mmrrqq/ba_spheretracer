#version 410 core
#define MAX_OBJECTS 10
#define MAX_MATERIALS 5
struct Sphere 
{
    int materialId;
    vec3 position;
    float radius;
};

struct Torus
{
    int materialId;
    vec3 position;
    float radius;
    float tubeRadius;
};

struct Material
{
    vec3 ambientColor;    
    vec3 diffuseColor;
    vec3 specularColor;
    float shininess;
};

struct PrimitiveScene 
{
    Sphere spheres[MAX_OBJECTS];
    Torus tori[MAX_OBJECTS];    
    int numSpheres;
    int numTori;
};

float distEpsilon = 0.001;
int maxMarchingSteps = 128;
float maxDrawDistance = 50.0;
bool ortho = false;
bool showStepCount = false;

uniform vec2 UImageDim;
uniform float UNormalEpsilon;
uniform vec3 ULightDirection;
uniform vec4 UEyePosition;

uniform PrimitiveScene UScene;
uniform Material UMaterials[MAX_MATERIALS];
uniform mat4 UInvView;

in vec2 TexCoords;
out vec4 color;

//http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/
float distanceToMandelbrot(vec3 pos) 
{
	vec3 z = pos;
    float power = 10;
	float dr = 1.0;
	float r = 0.0;
	for (int i = 0; i < 15 ; i++) {
		r = length(z);
		if (r>2) break;
		
		// convert to polar coordinates
		float theta = acos(z.z/r);
		float phi = atan(z.y,z.x);
		dr =  pow( r, power-1.0)*power*dr + 1.0;
		
		// scale and rotate the point
		float zr = pow( r,power);
		theta = theta*power;
		phi = phi*power;
		
		// convert back to cartesian coordinates
		z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
		z+=pos;
	}
	return 0.5*log(r)*r/dr;
}

// credit iquilez
float distanceToMandelbrot2(vec3 pos)
{
    vec3 w = pos;
    float m = dot(w,w);

    vec4 trap = vec4(abs(w),m);
	float dz = 1.0;
    
    
	for( int i=0; i<4; i++ )
    {
        float m2 = m*m;
        float m4 = m2*m2;
		dz = 8.0*sqrt(m4*m2*m)*dz + 1.0;

        float x = w.x; float x2 = x*x; float x4 = x2*x2;
        float y = w.y; float y2 = y*y; float y4 = y2*y2;
        float z = w.z; float z2 = z*z; float z4 = z2*z2;

        float k3 = x2 + z2;
        float k2 = inversesqrt( k3*k3*k3*k3*k3*k3*k3 );
        float k1 = x4 + y4 + z4 - 6.0*y2*z2 - 6.0*x2*y2 + 2.0*z2*x2;
        float k4 = x2 - y2 + z2;

        w.x = pos.x +  64.0*x*y*z*(x2-z2)*k4*(x4-6.0*x2*z2+z4)*k1*k2;
        w.y = pos.y + -16.0*y2*k3*k4*k4 + k1*k1;
        w.z = pos.z +  -8.0*y*k4*(x4*x4 - 28.0*x4*x2*z2 + 70.0*x4*z4 - 28.0*x2*z2*z4 + z4*z4)*k1*k2; 
        
        trap = min( trap, vec4(abs(w),m) );

        m = dot(w,w);
		if( m > 256.0 )
            break;
    }    

    return 0.25*log(m)*sqrt(m)/dz;
}

float distanceToGroundPlane(vec3 planePosition, vec4 planeNormal, vec3 position)
{
	return dot(position - planePosition, planeNormal.xyz) + planeNormal.w;
}

float distanceToSphere(vec3 spherePosition, float sphereRadius, vec3 position)
{
    return length(position - spherePosition) - sphereRadius;
}

float distanceToTorus(vec3 torusPosition, float radius, float tubeRadius, vec3 position)
{
    vec3 torusToPosition = position - torusPosition;
    vec2 q = vec2(length(torusToPosition.xz)-radius,torusToPosition.y);
    return length(q)-tubeRadius;
}

// -> vec2(distance, materialId)
vec2 distanceToScene(vec3 position) 
{
    float minDistance = 10000;    
    int materialId = -1;
    
    // for (int i = 0; i < UScene.numSpheres; i++)
    // {
    //     Sphere sphere = UScene.spheres[i];
    //     float d = distanceToSphere(sphere.position, sphere.radius, position);
    //     if (d < minDistance)
    //     {
    //         minDistance = d;
    //         materialId = sphere.materialId;
    //     }        
    // }    

    // for (int i = 0; i < UScene.numTori; i++)
    // {
    //     Torus torus = UScene.tori[i];
    //     float d = distanceToTorus(torus.position, torus.radius, torus.tubeRadius, position);
    //     if (d < minDistance)
    //     {
    //         minDistance = d;
    //         materialId = torus.materialId;
    //     }        
    // }

    float fractalDistance = distanceToMandelbrot2(position);
    if (fractalDistance < minDistance)
    {
        minDistance = fractalDistance;
        materialId = 1;
    }    

    return vec2(minDistance, materialId);
}

// https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-generating-camera-rays/generating-camera-rays
vec3 getRayDirection()
{          
    vec2 uv = ((TexCoords * UImageDim + 0.5) - 0.5 * UImageDim) / UImageDim.y;    
    return normalize(vec3(uv, -1));
}

float getConeOpeningAngle(vec3 rayDir)
{
    // TODO: this would be easier to calculate if I would know the fovy :D
    vec2 uvAngle = ((TexCoords * UImageDim + vec2(1.0, 0.5)) - 0.5 * UImageDim) / UImageDim.y;
    vec3 angleDir = normalize(vec3(uvAngle, -1));
    return 2 * acos(dot(rayDir, angleDir));
}

// http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting
vec3 getNormal(vec3 position)
{
    vec2 epsilon = vec2(UNormalEpsilon, 0.0);

    return normalize(
        vec3(
            distanceToScene(position + epsilon.xyy).x - distanceToScene(position - epsilon.xyy).x,
            distanceToScene(position + epsilon.yxy).x - distanceToScene(position - epsilon.yxy).x,
            distanceToScene(position + epsilon.yyx).x - distanceToScene(position - epsilon.yyx).x
        )
    );
}

float getShadowMinDistance(vec3 position)
{
    vec3 lightOrigin = position + -ULightDirection * 50;
    float depth = 0.0;
    float dist = 0.0;    
    float minDist = 1000;
    vec3 rayDirection = ULightDirection;
    for(int i = 0; i < maxMarchingSteps; i++)
    {                
        position = vec3(lightOrigin + depth * rayDirection);        
        dist = distanceToScene(position).x;  
        if (dist < minDist)
            minDist = dist;      
        if (dist < distEpsilon)
        {                                    
            return 0.0;
        }                   
        depth += dist;

        if (depth > 50)
        {            
            return minDist;
        }       
    }    
    return minDist;
}

vec3 getPhongColor(vec3 position, vec3 normal, int materialId, vec4 rayDir)
{        
    Material material = UMaterials[materialId];
    // TODO: move to light struct
    vec3 lightColor = vec3(1.0, 0.9, 0.9);

    float shadowDist = getShadowMinDistance(position);

    if (shadowDist < 0.01)
        return (material.ambientColor * lightColor);
        
    float diffuseContribution = dot(normal, - ULightDirection);    
    vec3 reflected = reflect(-ULightDirection, normal);
    float specularContribution = pow(max(dot(vec3(rayDir), reflected), 0.0), 32);
    
    return material.ambientColor * lightColor     
        + diffuseContribution * material.diffuseColor * lightColor
        + specularContribution * material.specularColor * lightColor;
}

void main()
{
    vec4 rayDirection = UInvView * vec4(getRayDirection(), 0.0);
    float dist = 0;
    
    vec3 position;
    vec4 eyePosition = UEyePosition;


    // if (ortho)
    // {
    //     eyePosition += vec4(((TexCoords * UImageDim + 0.5) - 0.5 * UImageDim) / UImageDim.y, 0.0);
    //     rayDirection = vec3(0,0,-1);
    // }

    for(int i = 0; i < maxMarchingSteps; i++)
    {                
        position = vec3(eyePosition + depth * rayDirection);        
        vec2 dist_mat = distanceToScene(position);
        dist = dist_mat.x;
        if (dist < distEpsilon)
        {
            if (showStepCount)
            {
                float steps = i/float(maxMarchingSteps);
                color = vec4(steps, 0.0, 1.0 - steps, 1.0);
            }
            else
            {
                color = vec4(getPhongColor(position, getNormal(position), int(dist_mat.y), rayDirection), 1.0);
            }
            return;
        }                   

        depth += dist;

        if (depth > maxDrawDistance)
        {
            color = vec4(0.1, 0.1, 0.1, 1.0);
            return;
        }

        // this creates a cool looking effect! but no distant fog as it was intended for :)
        // if (depth > maxDrawDistance - 10.0) 
        // {
        //     float factor = depth / maxDrawDistance;
        //     color = vec4(0.1, 0.1, 0.1, 1.0) * factor;
        //     return;
        // }
    }    
    color = vec4(0.1, 0.1, 0.1, 1.0);
}