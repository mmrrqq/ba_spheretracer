#version 430 core

struct Triangle
{
  int v0;
  int v1;
  int v2;
};

struct Vertex
{
  float x, y, z;
};

layout(local_size_x = 16, local_size_y = 16, local_size_z = 4) in;
// layout(r32f, binding = 0) restrict writeonly uniform image3D outTex;
layout(std430, binding = 0) writeonly buffer outDepthData
{
  float depthData[];
};
layout(std430, binding = 1) readonly buffer inVertices
{
  Vertex vertices[];
};
layout(std430, binding = 2) readonly buffer inTriangles
{
  Triangle triangles[];
};

bool intersectTriangle(Triangle triangle, vec3 rayOrigin, vec3 rayDirection)
{    
    Vertex v0 = vertices[triangle.v0];
    Vertex v1 = vertices[triangle.v1];
    Vertex v2 = vertices[triangle.v2];

    vec3 p0 = vec3(v0.x, v0.y, v0.z);
    vec3 p1 = vec3(v1.x, v1.y, v1.z);
    vec3 p2 = vec3(v2.x, v2.y, v2.z);

    vec3 vecA = p0 - p2;
    vec3 vecB = p1 - p2;
    vec3 vecT = -rayDirection;

    // key vector
    vec3 key = rayOrigin - p2;
    mat3 matrix = {vecA, vecB, vecT};
    float determinantBaseMatrix = determinant(matrix);

    // solve for a
    mat3 matrix_a = {key, vecB, vecT};
    float a = determinant(matrix_a) / determinantBaseMatrix;
    if (a < 0.0 || a > 1.0)
        return false;

    // solve for b
    mat3 matrix_b = {vecA, key, vecT};
    float b = determinant(matrix_b) / determinantBaseMatrix;
    if (b < 0.0 || b > 1.0 || a + b > 1.0)
        return false;

    // solve for t
    mat3 matrix_t = {vecA, vecB, key};
    float t = determinant(matrix_t) / determinantBaseMatrix;
    if (t <= 1e-5)
        return false;    

    return true;
}

float dot2( in vec3 v ) { return dot(v,v); }

float udTriangle(vec3 p, Triangle triangle)
{
  Vertex v0 = vertices[triangle.v0];
  Vertex v1 = vertices[triangle.v1];
  Vertex v2 = vertices[triangle.v2];
      
  vec3 p0 = vec3(v0.x, v0.y, v0.z);
  vec3 p1 = vec3(v1.x, v1.y, v1.z);
  vec3 p2 = vec3(v2.x, v2.y, v2.z);

  vec3 ba = p1 - p0; 
  vec3 cb = p2 - p1; 
  vec3 ac = p0 - p2; 

  vec3 pa = p - p0;
  vec3 pb = p - p1;
  vec3 pc = p - p2;

  vec3 nor = cross(ba, ac);

  return sqrt(
    (sign(dot(cross(ba,nor),pa)) +
      sign(dot(cross(cb,nor),pb)) +
      sign(dot(cross(ac,nor),pc))<2.0)
      ? min(
        min(
          dot2(ba * clamp(dot(ba, pa) / dot2(ba), 0.0, 1.0) - pa),
          dot2(cb * clamp(dot(cb, pb) / dot2(cb), 0.0, 1.0) - pb)
        ),
        dot2(ac * clamp(dot(ac, pc) / dot2(ac), 0.0, 1.0) - pc))
      : dot(nor,pa)*dot(nor,pa)/dot2(nor)
  );
}

void main() {  
  memoryBarrier();
  barrier();
  // get index in global work group i.e x,y position    
  ivec3 voxelCoords = ivec3(gl_GlobalInvocationID.xyz);

  ivec3 imgSize = ivec3(gl_NumWorkGroups * gl_WorkGroupSize);

  if (voxelCoords.x >= imgSize.x || voxelCoords.y >= imgSize.y || voxelCoords.z >= imgSize.z) {    
    return;
  }  

  int id = voxelCoords.x + imgSize.y * (voxelCoords.y + imgSize.z * voxelCoords.z);

  //get distance to object
  float depth = 1000.0;  
  bool inside = false;
  vec3 rayDirection = normalize(vec3(0.0, 1.0, 0.0));

  for (int i = 0; i < triangles.length(); i++)
  {
    Triangle triangle = triangles[i];    
        
    float tempDepth = udTriangle(voxelCoords, triangle);
    if (tempDepth < depth)
      depth = tempDepth;

    if (intersectTriangle(triangle, voxelCoords, rayDirection))
      inside = !inside;
  }  

  if (inside)
    depth = -depth;    

  memoryBarrier();
  barrier();
      
  depthData[id] = depth;

  memoryBarrier();
  barrier();
  // imageStore(outTex, voxelCoords, vec4(depth, 0, 0, 0));      
}