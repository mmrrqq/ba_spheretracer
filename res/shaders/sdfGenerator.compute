#version 430

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D inTex;
layout(rgba32f, binding = 1) uniform image3D outTex;

struct Triangle
{
  vec3 p1;
  vec3 p2;
  vec3 p3;
};

bool intersectTriangle(Triangle triangle, vec3 rayOrigin, vec3 rayDirection)
{    
    vec3 p0 = triangle.p1;
    vec3 p1 = triangle.p2;
    vec3 p2 = triangle.p3;

    vec3 vecA = p0 - p2;
    vec3 vecB = p1 - p2;
    vec3 vecT = -rayDirection;

    // key vector
    vec3 key = rayOrigin - p2;
    mat3 matrix = {vecA, vecB, vecT};
    float determinantBaseMatrix = determinant(matrix);

    // solve for a
    mat3 matrix_a = {key, vecB, vecT};
    float a = determinant(matrix_a) / determinantBaseMatrix;
    if (a < 0.0 || a > 1.0)
        return false;

    // solve for b
    mat3 matrix_b = {vecA, key, vecT};
    float b = determinant(matrix_b) / determinantBaseMatrix;
    if (b < 0.0 || b > 1.0 || a + b > 1.0)
        return false;

    // solve for t
    mat3 matrix_t = {vecA, vecB, key};
    float t = determinant(matrix_t) / determinantBaseMatrix;
    if (t <= 1e-5)
        return false;    

    return true;
}

float dot2( in vec3 v ) { return dot(v,v); }

float udTriangle(vec3 p, Triangle triangle)
{
  vec3 ba = triangle.p2 - triangle.p1; 
  vec3 cb = triangle.p3 - triangle.p2; 
  vec3 ac = triangle.p1 - triangle.p3; 

  vec3 pa = p - triangle.p1;
  vec3 pb = p - triangle.p2;
  vec3 pc = p - triangle.p3;

  vec3 nor = cross(ba, ac);

  return sqrt(
    (sign(dot(cross(ba,nor),pa)) +
      sign(dot(cross(cb,nor),pb)) +
      sign(dot(cross(ac,nor),pc))<2.0)
      ? min(
        min(
          dot2(ba * clamp(dot(ba, pa) / dot2(ba), 0.0, 1.0) - pa),
          dot2(cb * clamp(dot(cb, pb) / dot2(cb), 0.0, 1.0) - pb)
        ),
        dot2(ac * clamp(dot(ac, pc) / dot2(ac), 0.0, 1.0) - pc))
      : dot(nor,pa)*dot(nor,pa)/dot2(nor)
  );
}

void main() {  
  // get index in global work group i.e x,y position
  ivec3 voxelCoords = ivec3(gl_GlobalInvocationID.xyz);

  //get distance to object
  float depth = 1000.0;  
  bool inside = false;
  vec3 rayDirection = normalize(vec3(0.0, 1.0, 0.0));
  for (int i = 0; i < imageSize(inTex).x; i += 3)
  {
    Triangle triangle;
    triangle.p1 = imageLoad(inTex, ivec2(i, 0)).xyz;
    triangle.p2 = imageLoad(inTex, ivec2(i + 1, 0)).xyz;
    triangle.p3 = imageLoad(inTex, ivec2(i + 2, 0)).xyz;
        
    float tempDepth = udTriangle(voxelCoords, triangle);
    if (tempDepth < depth)
      depth = tempDepth;

    if (intersectTriangle(triangle, voxelCoords, rayDirection))
      inside = !inside;
  }

  if (inside)
    depth = -depth;  

  depth = depth / 20.0;
      
  imageStore(outTex, ivec3(voxelCoords), vec4(depth, depth, depth, 1.0));
}